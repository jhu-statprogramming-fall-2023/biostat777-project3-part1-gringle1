[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Terry Therneau. Author. Beth Atkinson. Author, maintainer. Brian Ripley. Translator.            producer initial R port, maintainer 1999-2017","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Therneau T, Atkinson B (2023). rpart: Recursive Partitioning Regression Trees. R package version 4.1.21, https://CRAN.R-project.org/package=rpart.","code":"@Manual{,   title = {rpart: Recursive Partitioning and Regression Trees},   author = {Terry Therneau and Beth Atkinson},   year = {2023},   note = {R package version 4.1.21},   url = {https://CRAN.R-project.org/package=rpart}, }"},{"path":"/index.html","id":"the-rpart-package-","dir":"","previous_headings":"","what":"Recursive Partitioning and Regression Trees","title":"Recursive Partitioning and Regression Trees","text":"source code rpart package, recommended package R. gets posted comprehensive R archive (CRAN) needed undergoing thorough testing.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Recursive Partitioning and Regression Trees","text":"rpart code builds classification regression models general structure using two stage procedure; resulting models can represented binary trees. package implements many ideas found CART (Classification Regression Trees) book programs Breiman, Friedman, Olshen Stone. CART trademarked name particular software implementation ideas tree used Splus routines Clark Pregibon, different acronym - Recursive PARTitioning rpart - chosen.","code":""},{"path":"/reference/car.test.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","title":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","text":"car.test.frame data frame 60 rows 8 columns,   giving data makes cars taken April, 1990 issue   Consumer Reports. part larger dataset,   columns given cu.summary.","code":""},{"path":"/reference/car.test.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","text":"","code":"car.test.frame"},{"path":"/reference/car.test.frame.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","text":"data frame contains following columns: Price numeric vector giving list price US dollars standard model Country origin, factor levels France,  Germany,  Japan , Japan/USA,  Korea, Mexico, Sweden USA Reliability numeric vector coded 1 5. Mileage fuel consumption miles per US gallon, tested. Type factor levels Compact  Large  Medium  Small  Sporty  Van Weight kerb weight pounds. Disp. engine capacity (displacement) litres. HP net horsepower vehicle.","code":""},{"path":"/reference/car.test.frame.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","text":"Consumer Reports, April, 1990, pp. 235--288 quoted John M. Chambers Trevor J. Hastie eds. (1992)   Statistical Models S, Wadsworth Brooks/Cole,   Pacific Grove, CA, pp. 46--47.","code":""},{"path":[]},{"path":"/reference/car.test.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automobile Data from 'Consumer Reports' 1990 — car.test.frame","text":"","code":"z.auto <- rpart(Mileage ~ Weight, car.test.frame) summary(z.auto) #> Call: #> rpart(formula = Mileage ~ Weight, data = car.test.frame) #>   n= 60  #>  #>           CP nsplit rel error    xerror       xstd #> 1 0.59534912      0 1.0000000 1.0695118 0.18372383 #> 2 0.13452819      1 0.4046509 0.5514154 0.10630116 #> 3 0.01282843      2 0.2701227 0.4062768 0.08015184 #> 4 0.01000000      3 0.2572943 0.4176181 0.07980637 #>  #> Variable importance #> Weight  #>    100  #>  #> Node number 1: 60 observations,    complexity param=0.5953491 #>   mean=24.58333, MSE=22.57639  #>   left son=2 (45 obs) right son=3 (15 obs) #>   Primary splits: #>       Weight < 2567.5 to the right, improve=0.5953491, (0 missing) #>  #> Node number 2: 45 observations,    complexity param=0.1345282 #>   mean=22.46667, MSE=8.026667  #>   left son=4 (22 obs) right son=5 (23 obs) #>   Primary splits: #>       Weight < 3087.5 to the right, improve=0.5045118, (0 missing) #>  #> Node number 3: 15 observations #>   mean=30.93333, MSE=12.46222  #>  #> Node number 4: 22 observations #>   mean=20.40909, MSE=2.78719  #>  #> Node number 5: 23 observations,    complexity param=0.01282843 #>   mean=24.43478, MSE=5.115312  #>   left son=10 (15 obs) right son=11 (8 obs) #>   Primary splits: #>       Weight < 2747.5 to the right, improve=0.1476996, (0 missing) #>  #> Node number 10: 15 observations #>   mean=23.8, MSE=4.026667  #>  #> Node number 11: 8 observations #>   mean=25.625, MSE=4.984375  #>"},{"path":"/reference/car90.html","id":null,"dir":"Reference","previous_headings":"","what":"Automobile Data from 'Consumer Reports' 1990 — car90","title":"Automobile Data from 'Consumer Reports' 1990 — car90","text":"Data 111 cars, taken pages 235--255, 281--285 287--288   April 1990 Consumer Reports Magazine.","code":""},{"path":"/reference/car90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automobile Data from 'Consumer Reports' 1990 — car90","text":"","code":"data(car90)"},{"path":"/reference/car90.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automobile Data from 'Consumer Reports' 1990 — car90","text":"data frame contains following columns Country factor giving country car       manufactured Disp engine displacement cubic inches Disp2 engine displacement liters Eng.Rev engine revolutions per mile, engine speed 60 mph Front.Hd distance car's head-liner head       5 ft. 9 . front seat passenger, inches, measured CU Frt.Leg.Room maximum front leg room, inches, measured CU Frt.Shld front shoulder room, inches, measured CU Gear.Ratio overall gear ratio, high gear, manual transmission Gear2 overall gear ratio, high gear, automatic transmission HP net horsepower HP.revs red line---maximum safe engine speed rpm Height height car, inches, supplied manufacturer Length overall length, inches, supplied manufacturer Luggage luggage space Mileage numeric vector gas mileage miles/gallon       tested CU; contains NAs. Model2 alternate name, car sold two labels Price list price standard equipment, dollars Rear.Hd distance car's head-liner head       5 ft 9 . rear seat passenger, inches, measured CU Rear.Seating rear fore--aft seating room, inches,       measured CU RearShld rear shoulder room, inches, measured CU Reliability ordered factor levels Much worse <       worse < average < better < Much \tbetter: contains NAs. Rim factor giving rim size Sratio.m Number turns steering       wheel required turn 30 foot radius, manual steering Sratio.p Number turns steering       wheel required turn 30 foot radius, power steering Steering steering type offered: manual, power, Tank fuel refill capacity gallons Tires factor giving tire size Trans1 manual transmission, factor levels ,       man.4, man.5 man.6 Trans2 automatic transmission, factor levels ,       auto.3, auto.4, auto.CVT.  car       missing manual automatic transmission variables,       several options Turning radius turning circle feet Type factor giving general type car.       levels : Small, Sporty, Compact, Medium, Large, Van Weight order statistic giving relative weights       cars; 1 lightest 111 heaviest Wheel.base length wheelbase, inches, supplied manufacturer Width width car, inches, supplied manufacturer","code":""},{"path":"/reference/car90.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Automobile Data from 'Consumer Reports' 1990 — car90","text":"derived (permission) data set car.  S-PLUS, clean variable names definitions.","code":""},{"path":[]},{"path":"/reference/car90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automobile Data from 'Consumer Reports' 1990 — car90","text":"","code":"data(car90) plot(car90$Price/1000, car90$Weight,      xlab = \"Price (thousands)\", ylab = \"Weight (lbs)\") mlowess <- function(x, y, ...) {     keep <- !(is.na(x) | is.na(y))     lowess(x[keep], y[keep], ...) } with(car90, lines(mlowess(Price/1000, Weight, f = 0.5)))"},{"path":"/reference/cu.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","title":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","text":"cu.summary data frame 117 rows 5 columns,   giving data makes cars taken April, 1990 issue   Consumer Reports.","code":""},{"path":"/reference/cu.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","text":"","code":"cu.summary"},{"path":"/reference/cu.summary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","text":"data frame contains following columns: Price numeric vector giving list price US dollars standard model Country origin, factor levels       Brazil,       England,       France,       Germany,       Japan,       Japan/USA,       Korea,       Mexico,       Sweden       USA Reliability ordered factor levels       Much worse < worse < average < better < Much better Mileage fuel consumption miles per US gallon, tested. Type factor levels       Compact       Large       Medium       Small       Sporty       Van","code":""},{"path":"/reference/cu.summary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","text":"Consumer Reports, April, 1990, pp. 235--288 quoted John M. Chambers Trevor J. Hastie eds. (1992)   Statistical Models S, Wadsworth Brooks/Cole,   Pacific Grove, CA, pp. 46--47.","code":""},{"path":[]},{"path":"/reference/cu.summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automobile Data from 'Consumer Reports' 1990 — cu.summary","text":"","code":"fit <- rpart(Price ~ Mileage + Type + Country, cu.summary) par(xpd = TRUE) plot(fit, compress = TRUE) text(fit, use.n = TRUE)"},{"path":"/reference/kyphosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on Children who have had Corrective Spinal Surgery — kyphosis","title":"Data on Children who have had Corrective Spinal Surgery — kyphosis","text":"kyphosis data frame 81 rows 4 columns.   representing data children corrective spinal surgery","code":""},{"path":"/reference/kyphosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on Children who have had Corrective Spinal Surgery — kyphosis","text":"","code":"kyphosis"},{"path":"/reference/kyphosis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on Children who have had Corrective Spinal Surgery — kyphosis","text":"data frame contains following columns: Kyphosis factor levels absent  present indicating kyphosis (type deformation) present operation. Age months Number number vertebrae involved Start number first (topmost) vertebra operated .","code":""},{"path":"/reference/kyphosis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data on Children who have had Corrective Spinal Surgery — kyphosis","text":"John M. Chambers Trevor J. Hastie eds. (1992)   Statistical Models S, Wadsworth Brooks/Cole,   Pacific Grove, CA.","code":""},{"path":"/reference/kyphosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on Children who have had Corrective Spinal Surgery — kyphosis","text":"","code":"fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis) fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,               parms = list(prior = c(0.65, 0.35), split = \"information\")) fit3 <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis,               control = rpart.control(cp = 0.05)) par(mfrow = c(1,2), xpd = TRUE) plot(fit) text(fit, use.n = TRUE) plot(fit2) text(fit2, use.n = TRUE)"},{"path":"/reference/labels.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Split Labels For an Rpart Object — labels.rpart","title":"Create Split Labels For an Rpart Object — labels.rpart","text":"function provides labels branches rpart tree.","code":""},{"path":"/reference/labels.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Split Labels For an Rpart Object — labels.rpart","text":"","code":"# S3 method for rpart labels(object, digits = 4, minlength = 1L, pretty, collapse = TRUE, ...)"},{"path":"/reference/labels.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Split Labels For an Rpart Object — labels.rpart","text":"object fitted model object class \"rpart\".  assumed   result function produces object named   components returned rpart function. digits number digits used numeric values.     rpart functions call labels   explicitly set value, options(\"digits\")   default. minlength minimum length abbreviation character factor variables.   0 abbreviation done; 1 single English letters   used, first lower case upper case (maximum 52   levels). value greater , abbreviate   function used, passed minlength argument. pretty argument included compatibility original Splus tree package:   pretty = 0 implies minlength = 0L,   pretty = NULL implies minlength = 1L,   pretty = TRUE implies minlength = 4L. collapse logical. returned set labels always length   number nodes tree. collapse = TRUE (default),    returned value vector labels branch leading   node, \"root\" label top node. FALSE, returned value two   column matrix labels left right branches leading    node, \"leaf\" branch labels terminal   nodes. ... optional arguments abbreviate.","code":""},{"path":"/reference/labels.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Split Labels For an Rpart Object — labels.rpart","text":"Vector split labels (collapse = TRUE) matrix left   right splits (collapse = FALSE) supplied rpart object.  function called printing methods rpart intended called directly users.","code":""},{"path":[]},{"path":"/reference/meanvar.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"Creates plot current graphics device deviance  node divided number observations node.  Also returns  node number.","code":""},{"path":"/reference/meanvar.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"","code":"meanvar(tree, ...)  # S3 method for rpart meanvar(tree, xlab = \"ave(y)\", ylab = \"ave(deviance)\", ...)"},{"path":"/reference/meanvar.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"tree fitted model object class \"rpart\".  assumed result  function produces object named  components returned rpart function. xlab x-axis label plot. ylab y-axis label plot. ... additional graphical parameters may supplied arguments function.","code":""},{"path":"/reference/meanvar.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"invisible list containing following vectors returned. x fitted value terminal nodes (yval). y deviance node divided number observations node. label node number.","code":""},{"path":"/reference/meanvar.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"plot put current graphics device.","code":""},{"path":[]},{"path":"/reference/meanvar.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean-Variance Plot for an Rpart Object — meanvar.rpart","text":"","code":"z.auto <- rpart(Mileage ~ Weight, car.test.frame) meanvar(z.auto, log = 'xy')"},{"path":"/reference/na.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Handles Missing Values in an Rpart Object — na.rpart","title":"Handles Missing Values in an Rpart Object — na.rpart","text":"Handles missing values \"rpart\" object.","code":""},{"path":"/reference/na.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handles Missing Values in an Rpart Object — na.rpart","text":"","code":"na.rpart(x)"},{"path":"/reference/na.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handles Missing Values in an Rpart Object — na.rpart","text":"x model frame.","code":""},{"path":"/reference/na.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handles Missing Values in an Rpart Object — na.rpart","text":"Default function handles missing values calling   function rpart. omits cases part response missing   explanatory variables missing.","code":""},{"path":"/reference/path.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"Returns names list element contains splits   path root selected nodes.","code":""},{"path":"/reference/path.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"","code":"path.rpart(tree, nodes, pretty = 0, print.it = TRUE)"},{"path":"/reference/path.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"tree fitted model object class \"rpart\".  assumed   result function produces object named   components returned rpart function. nodes integer vector containing indices (node numbers) nodes   paths desired.  missing, user selects nodes described   . pretty integer denoting extent factor levels split labels   abbreviated.  value (0) signifies abbreviation.    NULL, default, signifies using elements letters represent   different factor levels. print.Logical. Denotes whether paths printed   nodes interactively selected.   Irrelevant nodes   argument supplied.","code":""},{"path":"/reference/path.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"named (node) list, element contains    splits  path root specified   selected nodes.","code":""},{"path":"/reference/path.rpart.html","id":"graphical-interaction","dir":"Reference","previous_headings":"","what":"Graphical Interaction","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"dendrogram rpart object expected visible   graphics device, graphics input device (e.g. mouse)   required.  Clicking (selection button) node selects   node.  process may repeated number times.  Clicking   exit button stop selection process return list   paths.","code":""},{"path":"/reference/path.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"function required argument rpart object    list nodes optional arguments.  Omitting list   nodes cause function  wait    user    select  nodes  dendrogram.  return list,   one component node  specified   selected.    component  contains sequence splits leading   node.  graphical  interaction,   individual   paths printed nodes selected.","code":""},{"path":"/reference/path.rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"function modified path.tree S.","code":""},{"path":[]},{"path":"/reference/path.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Follow Paths to Selected Nodes of an Rpart Object — path.rpart","text":"","code":"fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis) print(fit) #> n= 81  #>  #> node), split, n, loss, yval, (yprob) #>       * denotes terminal node #>  #>  1) root 81 17 absent (0.79012346 0.20987654)   #>    2) Start>=8.5 62  6 absent (0.90322581 0.09677419)   #>      4) Start>=14.5 29  0 absent (1.00000000 0.00000000) * #>      5) Start< 14.5 33  6 absent (0.81818182 0.18181818)   #>       10) Age< 55 12  0 absent (1.00000000 0.00000000) * #>       11) Age>=55 21  6 absent (0.71428571 0.28571429)   #>         22) Age>=111 14  2 absent (0.85714286 0.14285714) * #>         23) Age< 111 7  3 present (0.42857143 0.57142857) * #>    3) Start< 8.5 19  8 present (0.42105263 0.57894737) * path.rpart(fit, nodes = c(11, 22)) #>  #>  node number: 11  #>    root #>    Start>=8.5 #>    Start< 14.5 #>    Age>=55 #>  #>  node number: 22  #>    root #>    Start>=8.5 #>    Start< 14.5 #>    Age>=55 #>    Age>=111"},{"path":"/reference/plot.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an Rpart Object — plot.rpart","title":"Plot an Rpart Object — plot.rpart","text":"Plots rpart object current graphics device.","code":""},{"path":"/reference/plot.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an Rpart Object — plot.rpart","text":"","code":"# S3 method for rpart plot(x, uniform = FALSE, branch = 1, compress = FALSE, nspace,      margin = 0, minbranch = 0.3, branch.col = 1, branch.lty = 1,       branch.lwd = 1, ...)"},{"path":"/reference/plot.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an Rpart Object — plot.rpart","text":"x fitted object class \"rpart\", containing classification,   regression, rate tree. uniform TRUE, uniform vertical spacing nodes used; may less cluttered fitting large plot onto page. default use non-uniform spacing proportional  error fit. branch controls shape branches parent child node. number 0 1 allowed.  value 1 gives square shouldered branches, value 0 give V shaped branches,  values intermediate. compress FALSE, leaf nodes horizontal plot coordinates 1:nleaves.   TRUE, routine attempts compact arrangement tree. compaction algorithm assumes uniform=TRUE; surprisingly, result usually improvement even case. nspace amount extra space node children leaf, compared minimal space leaves.   Applies compressed trees .  default value branch. margin extra fraction white space leave around borders tree. (Long labels sometimes get cut default computation). minbranch set minimum length branch minbranch times average branch length.  parameter ignored uniform=TRUE. Sometimes split give little improvement, even (classification case) improvement .   tree branch lengths strictly proportional improvement leaves room squeeze node labels. branch.col set color branches. branch.lty set line type branches. branch.lwd set line width branches. ... arguments passed methods.","code":""},{"path":"/reference/plot.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an Rpart Object — plot.rpart","text":"coordinates nodes returned list, components x y.","code":""},{"path":"/reference/plot.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Plot an Rpart Object — plot.rpart","text":"unlabeled plot produced current graphics device: one opened needed. order build plot usual S style, e.g., separate text command adding labels, extra information plot needs retained.  kept environment package.","code":""},{"path":"/reference/plot.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot an Rpart Object — plot.rpart","text":"function method generic function plot, objects class rpart. y-coordinate top node tree always 1.","code":""},{"path":[]},{"path":"/reference/plot.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an Rpart Object — plot.rpart","text":"","code":"fit <- rpart(Price ~ Mileage + Type + Country, cu.summary) par(xpd = TRUE) plot(fit, compress = TRUE) text(fit, use.n = TRUE)"},{"path":"/reference/plotcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"Gives visual representation cross-validation results  rpart object.","code":""},{"path":"/reference/plotcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"","code":"plotcp(x, minline = TRUE, lty = 3, col = 1,        upper = c(\"size\", \"splits\", \"none\"), ...)"},{"path":"/reference/plotcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"x object class \"rpart\" minline whether horizontal line drawn 1SE minimum curve. lty line type line col colour line upper plotted top axis: size tree (number leaves), number splits nothing. ... additional plotting parameters","code":""},{"path":"/reference/plotcp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"None.","code":""},{"path":"/reference/plotcp.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"plot produced current graphical device.","code":""},{"path":"/reference/plotcp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Complexity Parameter Table for an Rpart Fit — plotcp","text":"set possible cost-complexity prunings tree nested set. geometric means intervals values cp pruning optimal, cross-validation (usually) done initial construction rpart. cptable fit contains mean standard deviation errors cross-validated prediction geometric means, plotted function. good choice cp pruning often leftmost value mean lies horizontal line.","code":""},{"path":[]},{"path":"/reference/post.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"PostScript Presentation Plot of an Rpart Object — post.rpart","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"Generates PostScript presentation plot rpart object.","code":""},{"path":"/reference/post.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"","code":"post(tree, ...)  # S3 method for rpart post(tree, title.,       filename = paste(deparse(substitute(tree)), \".ps\", sep = \"\"),       digits = getOption(\"digits\") - 2, pretty = TRUE,      use.n = TRUE, horizontal = TRUE, ...)"},{"path":"/reference/post.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"tree fitted model object class \"rpart\".  assumed result  function produces object named  components returned rpart function. title. title appears top plot.  default,  name rpart endpoint printed . filename ASCII file contain output.  default, name file  name object given rpart (suffix .ps added).  filename = \"\", plot appears current graphical device. digits number significant digits include numerical data. pretty integer denoting extent factor levels  abbreviated character strings defining splits;  (0) signifies abbreviation levels.  NULL signifies using  elements letters represent different factor levels.   default (TRUE) indicates maximum possible abbreviation. use.n Logical.  TRUE (default), adds label  #events level1/ #events level2/ etc. method class, n  method anova, #events/n methods poisson exp). horizontal Logical.  TRUE (default), plot horizontal. FALSE, plot  appears landscape. ... arguments postscript function.","code":""},{"path":"/reference/post.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"plot rpart created using postscript driver, current device filename = \"\".","code":""},{"path":"/reference/post.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"plot created uses functions plot.rpart text.rpart ( fancy option).  settings chosen looked  good us, options may better, depending rpart  object.    Users encouraged write function containing favorite  options.","code":""},{"path":[]},{"path":"/reference/post.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PostScript Presentation Plot of an Rpart Object — post.rpart","text":"","code":"if (FALSE) { z.auto <- rpart(Mileage ~ Weight, car.test.frame) post(z.auto, file = \"\")   # display tree on active device    # now construct postscript version on file \"pretty.ps\"    # with no title post(z.auto, file = \"pretty.ps\", title = \" \") z.hp <- rpart(Mileage ~ Weight + HP, car.test.frame) post(z.hp)}"},{"path":"/reference/predict.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from a Fitted Rpart Object — predict.rpart","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"Returns vector predicted responses fitted rpart object.","code":""},{"path":"/reference/predict.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"","code":"# S3 method for rpart predict(object, newdata,        type = c(\"vector\", \"prob\", \"class\", \"matrix\"),        na.action = na.pass, ...)"},{"path":"/reference/predict.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"object fitted model object class \"rpart\".  assumed     result function produces object named      components returned rpart function. newdata data frame containing values predictions required.      predictors referred right side     formula(object) must present name newdata.     missing, fitted values returned. type character string denoting type predicted value returned.      rpart object classification tree, default     return prob predictions, matrix whose columns     probability first, second, etc. class.  (agrees     default behavior tree).  Otherwise, vector     result returned. na.action function determine done     missing values newdata.  default pass     tree using surrogates way selected model built.     possibilities na.omit na.fail. ... arguments passed methods.","code":""},{"path":"/reference/predict.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"new object obtained   dropping newdata object.  factor predictors,   observation contains level used grow tree, left   deepest possible node frame$yval node   prediction. type = \"vector\": vector predicted responses.   regression trees mean response node, Poisson   trees estimated response rate, classification trees   predicted class (number). type = \"prob\": (classification tree) matrix class probabilities. type = \"matrix\": matrix full responses   (frame$yval2 exists, otherwise frame$yval).    regression trees, mean response, Poisson trees   response rate number events node fitted   tree, classification trees concatenation least   predicted class, class counts node fitted tree,   class probabilities (versions rpart may contain   columns). type = \"class\": (classification tree) factor classifications based   responses.","code":""},{"path":"/reference/predict.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"function method generic function predict class   \"rpart\". can invoked calling predict object   appropriate class, directly calling predict.rpart   regardless class object.","code":""},{"path":[]},{"path":"/reference/predict.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from a Fitted Rpart Object — predict.rpart","text":"","code":"z.auto <- rpart(Mileage ~ Weight, car.test.frame) predict(z.auto) #>                Eagle Summit 4               Ford Escort   4  #>                      30.93333                      30.93333  #>                Ford Festiva 4                 Honda Civic 4  #>                      30.93333                      30.93333  #>               Mazda Protege 4              Mercury Tracer 4  #>                      30.93333                      30.93333  #>               Nissan Sentra 4              Pontiac LeMans 4  #>                      30.93333                      30.93333  #>               Subaru Loyale 4                Subaru Justy 3  #>                      30.93333                      30.93333  #>              Toyota Corolla 4               Toyota Tercel 4  #>                      30.93333                      30.93333  #>            Volkswagen Jetta 4           Chevrolet Camaro V8  #>                      30.93333                      20.40909  #>                 Dodge Daytona               Ford Mustang V8  #>                      23.80000                      20.40909  #>                    Ford Probe          Honda Civic CRX Si 4  #>                      25.62500                      30.93333  #>        Honda Prelude Si 4WS 4                Nissan 240SX 4  #>                      25.62500                      23.80000  #>                Plymouth Laser                   Subaru XT 4  #>                      23.80000                      30.93333  #>                     Audi 80 4               Buick Skylark 4  #>                      25.62500                      25.62500  #>           Chevrolet Beretta 4          Chrysler Le Baron V6  #>                      25.62500                      23.80000  #>                  Ford Tempo 4                Honda Accord 4  #>                      23.80000                      23.80000  #>                   Mazda 626 4           Mitsubishi Galant 4  #>                      23.80000                      25.62500  #>           Mitsubishi Sigma V6               Nissan Stanza 4  #>                      20.40909                      23.80000  #>           Oldsmobile Calais 4                 Peugeot 405 4  #>                      25.62500                      25.62500  #>               Subaru Legacy 4                Toyota Camry 4  #>                      23.80000                      23.80000  #>                   Volvo 240 4               Acura Legend V6  #>                      23.80000                      20.40909  #>               Buick Century 4       Chrysler Le Baron Coupe  #>                      23.80000                      23.80000  #>        Chrysler New Yorker V6              Eagle Premier V6  #>                      20.40909                      20.40909  #>                Ford Taurus V6           Ford Thunderbird V6  #>                      20.40909                      20.40909  #>              Hyundai Sonata 4                  Mazda 929 V6  #>                      23.80000                      20.40909  #>              Nissan Maxima V6    Oldsmobile Cutlass Ciera 4  #>                      20.40909                      23.80000  #> Oldsmobile Cutlass Supreme V6             Toyota Cressida 6  #>                      20.40909                      20.40909  #>             Buick Le Sabre V6          Chevrolet Caprice V8  #>                      20.40909                      20.40909  #>    Ford LTD Crown Victoria V8       Chevrolet Lumina APV V6  #>                      20.40909                      20.40909  #>        Dodge Grand Caravan V6              Ford Aerostar V6  #>                      20.40909                      20.40909  #>                  Mazda MPV V6            Mitsubishi Wagon 4  #>                      20.40909                      20.40909  #>               Nissan Axxess 4                  Nissan Van 4  #>                      20.40909                      20.40909   fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis) predict(fit, type = \"prob\")   # class probabilities (default) #>       absent   present #> 1  0.4210526 0.5789474 #> 2  0.8571429 0.1428571 #> 3  0.4210526 0.5789474 #> 4  0.4210526 0.5789474 #> 5  1.0000000 0.0000000 #> 6  1.0000000 0.0000000 #> 7  1.0000000 0.0000000 #> 8  1.0000000 0.0000000 #> 9  1.0000000 0.0000000 #> 10 0.4285714 0.5714286 #> 11 0.4285714 0.5714286 #> 12 1.0000000 0.0000000 #> 13 0.4210526 0.5789474 #> 14 1.0000000 0.0000000 #> 15 1.0000000 0.0000000 #> 16 1.0000000 0.0000000 #> 17 1.0000000 0.0000000 #> 18 0.8571429 0.1428571 #> 19 1.0000000 0.0000000 #> 20 1.0000000 0.0000000 #> 21 1.0000000 0.0000000 #> 22 0.4210526 0.5789474 #> 23 0.4285714 0.5714286 #> 24 0.4210526 0.5789474 #> 25 0.4210526 0.5789474 #> 26 1.0000000 0.0000000 #> 27 0.4210526 0.5789474 #> 28 0.4285714 0.5714286 #> 29 1.0000000 0.0000000 #> 30 1.0000000 0.0000000 #> 31 1.0000000 0.0000000 #> 32 0.8571429 0.1428571 #> 33 0.8571429 0.1428571 #> 34 1.0000000 0.0000000 #> 35 0.8571429 0.1428571 #> 36 1.0000000 0.0000000 #> 37 1.0000000 0.0000000 #> 38 0.4210526 0.5789474 #> 39 1.0000000 0.0000000 #> 40 0.4285714 0.5714286 #> 41 0.4210526 0.5789474 #> 42 1.0000000 0.0000000 #> 43 0.4210526 0.5789474 #> 44 0.4210526 0.5789474 #> 45 1.0000000 0.0000000 #> 46 0.8571429 0.1428571 #> 47 1.0000000 0.0000000 #> 48 0.8571429 0.1428571 #> 49 0.4210526 0.5789474 #> 50 0.8571429 0.1428571 #> 51 0.4285714 0.5714286 #> 52 1.0000000 0.0000000 #> 53 0.4210526 0.5789474 #> 54 1.0000000 0.0000000 #> 55 1.0000000 0.0000000 #> 56 1.0000000 0.0000000 #> 57 1.0000000 0.0000000 #> 58 0.4210526 0.5789474 #> 59 1.0000000 0.0000000 #> 60 0.4285714 0.5714286 #> 61 0.4210526 0.5789474 #> 62 0.4210526 0.5789474 #> 63 0.4210526 0.5789474 #> 64 1.0000000 0.0000000 #> 65 1.0000000 0.0000000 #> 66 1.0000000 0.0000000 #> 67 1.0000000 0.0000000 #> 68 0.8571429 0.1428571 #> 69 1.0000000 0.0000000 #> 70 1.0000000 0.0000000 #> 71 0.8571429 0.1428571 #> 72 0.8571429 0.1428571 #> 73 1.0000000 0.0000000 #> 74 0.8571429 0.1428571 #> 75 1.0000000 0.0000000 #> 76 1.0000000 0.0000000 #> 77 0.8571429 0.1428571 #> 78 1.0000000 0.0000000 #> 79 0.8571429 0.1428571 #> 80 0.4210526 0.5789474 #> 81 1.0000000 0.0000000 predict(fit, type = \"vector\") # level numbers #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #>  2  1  2  2  1  1  1  1  1  2  2  1  2  1  1  1  1  1  1  1  1  2  2  2  2  1  #> 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #>  2  2  1  1  1  1  1  1  1  1  1  2  1  2  2  1  2  2  1  1  1  1  2  1  2  1  #> 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78  #>  2  1  1  1  1  2  1  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  #> 79 80 81  #>  1  2  1  predict(fit, type = \"class\")  # factor #>       1       2       3       4       5       6       7       8       9      10  #> present  absent present present  absent  absent  absent  absent  absent present  #>      11      12      13      14      15      16      17      18      19      20  #> present  absent present  absent  absent  absent  absent  absent  absent  absent  #>      21      22      23      24      25      26      27      28      29      30  #>  absent present present present present  absent present present  absent  absent  #>      31      32      33      34      35      36      37      38      39      40  #>  absent  absent  absent  absent  absent  absent  absent present  absent present  #>      41      42      43      44      45      46      47      48      49      50  #> present  absent present present  absent  absent  absent  absent present  absent  #>      51      52      53      54      55      56      57      58      59      60  #> present  absent present  absent  absent  absent  absent present  absent present  #>      61      62      63      64      65      66      67      68      69      70  #> present present present  absent  absent  absent  absent  absent  absent  absent  #>      71      72      73      74      75      76      77      78      79      80  #>  absent  absent  absent  absent  absent  absent  absent  absent  absent present  #>      81  #>  absent  #> Levels: absent present predict(fit, type = \"matrix\") # level number, class frequencies, probabilities #>    [,1] [,2] [,3]      [,4]      [,5]       [,6] #> 1     2    8   11 0.4210526 0.5789474 0.23456790 #> 2     1   12    2 0.8571429 0.1428571 0.17283951 #> 3     2    8   11 0.4210526 0.5789474 0.23456790 #> 4     2    8   11 0.4210526 0.5789474 0.23456790 #> 5     1   29    0 1.0000000 0.0000000 0.35802469 #> 6     1   29    0 1.0000000 0.0000000 0.35802469 #> 7     1   29    0 1.0000000 0.0000000 0.35802469 #> 8     1   29    0 1.0000000 0.0000000 0.35802469 #> 9     1   29    0 1.0000000 0.0000000 0.35802469 #> 10    2    3    4 0.4285714 0.5714286 0.08641975 #> 11    2    3    4 0.4285714 0.5714286 0.08641975 #> 12    1   29    0 1.0000000 0.0000000 0.35802469 #> 13    2    8   11 0.4210526 0.5789474 0.23456790 #> 14    1   12    0 1.0000000 0.0000000 0.14814815 #> 15    1   29    0 1.0000000 0.0000000 0.35802469 #> 16    1   29    0 1.0000000 0.0000000 0.35802469 #> 17    1   29    0 1.0000000 0.0000000 0.35802469 #> 18    1   12    2 0.8571429 0.1428571 0.17283951 #> 19    1   29    0 1.0000000 0.0000000 0.35802469 #> 20    1   12    0 1.0000000 0.0000000 0.14814815 #> 21    1   29    0 1.0000000 0.0000000 0.35802469 #> 22    2    8   11 0.4210526 0.5789474 0.23456790 #> 23    2    3    4 0.4285714 0.5714286 0.08641975 #> 24    2    8   11 0.4210526 0.5789474 0.23456790 #> 25    2    8   11 0.4210526 0.5789474 0.23456790 #> 26    1   12    0 1.0000000 0.0000000 0.14814815 #> 27    2    8   11 0.4210526 0.5789474 0.23456790 #> 28    2    3    4 0.4285714 0.5714286 0.08641975 #> 29    1   29    0 1.0000000 0.0000000 0.35802469 #> 30    1   29    0 1.0000000 0.0000000 0.35802469 #> 31    1   29    0 1.0000000 0.0000000 0.35802469 #> 32    1   12    2 0.8571429 0.1428571 0.17283951 #> 33    1   12    2 0.8571429 0.1428571 0.17283951 #> 34    1   29    0 1.0000000 0.0000000 0.35802469 #> 35    1   12    2 0.8571429 0.1428571 0.17283951 #> 36    1   29    0 1.0000000 0.0000000 0.35802469 #> 37    1   12    0 1.0000000 0.0000000 0.14814815 #> 38    2    8   11 0.4210526 0.5789474 0.23456790 #> 39    1   12    0 1.0000000 0.0000000 0.14814815 #> 40    2    3    4 0.4285714 0.5714286 0.08641975 #> 41    2    8   11 0.4210526 0.5789474 0.23456790 #> 42    1   12    0 1.0000000 0.0000000 0.14814815 #> 43    2    8   11 0.4210526 0.5789474 0.23456790 #> 44    2    8   11 0.4210526 0.5789474 0.23456790 #> 45    1   29    0 1.0000000 0.0000000 0.35802469 #> 46    1   12    2 0.8571429 0.1428571 0.17283951 #> 47    1   29    0 1.0000000 0.0000000 0.35802469 #> 48    1   12    2 0.8571429 0.1428571 0.17283951 #> 49    2    8   11 0.4210526 0.5789474 0.23456790 #> 50    1   12    2 0.8571429 0.1428571 0.17283951 #> 51    2    3    4 0.4285714 0.5714286 0.08641975 #> 52    1   29    0 1.0000000 0.0000000 0.35802469 #> 53    2    8   11 0.4210526 0.5789474 0.23456790 #> 54    1   29    0 1.0000000 0.0000000 0.35802469 #> 55    1   29    0 1.0000000 0.0000000 0.35802469 #> 56    1   29    0 1.0000000 0.0000000 0.35802469 #> 57    1   12    0 1.0000000 0.0000000 0.14814815 #> 58    2    8   11 0.4210526 0.5789474 0.23456790 #> 59    1   12    0 1.0000000 0.0000000 0.14814815 #> 60    2    3    4 0.4285714 0.5714286 0.08641975 #> 61    2    8   11 0.4210526 0.5789474 0.23456790 #> 62    2    8   11 0.4210526 0.5789474 0.23456790 #> 63    2    8   11 0.4210526 0.5789474 0.23456790 #> 64    1   29    0 1.0000000 0.0000000 0.35802469 #> 65    1   29    0 1.0000000 0.0000000 0.35802469 #> 66    1   12    0 1.0000000 0.0000000 0.14814815 #> 67    1   29    0 1.0000000 0.0000000 0.35802469 #> 68    1   12    2 0.8571429 0.1428571 0.17283951 #> 69    1   12    0 1.0000000 0.0000000 0.14814815 #> 70    1   29    0 1.0000000 0.0000000 0.35802469 #> 71    1   12    2 0.8571429 0.1428571 0.17283951 #> 72    1   12    2 0.8571429 0.1428571 0.17283951 #> 73    1   29    0 1.0000000 0.0000000 0.35802469 #> 74    1   12    2 0.8571429 0.1428571 0.17283951 #> 75    1   29    0 1.0000000 0.0000000 0.35802469 #> 76    1   29    0 1.0000000 0.0000000 0.35802469 #> 77    1   12    2 0.8571429 0.1428571 0.17283951 #> 78    1   12    0 1.0000000 0.0000000 0.14814815 #> 79    1   12    2 0.8571429 0.1428571 0.17283951 #> 80    2    8   11 0.4210526 0.5789474 0.23456790 #> 81    1   12    0 1.0000000 0.0000000 0.14814815  sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25)) fit <- rpart(Species ~ ., data = iris, subset = sub) fit #> n= 75  #>  #> node), split, n, loss, yval, (yprob) #>       * denotes terminal node #>  #> 1) root 75 50 setosa (0.3333333 0.3333333 0.3333333)   #>   2) Petal.Length< 2.45 25  0 setosa (1.0000000 0.0000000 0.0000000) * #>   3) Petal.Length>=2.45 50 25 versicolor (0.0000000 0.5000000 0.5000000)   #>     6) Petal.Width< 1.75 28  3 versicolor (0.0000000 0.8928571 0.1071429) * #>     7) Petal.Width>=1.75 22  0 virginica (0.0000000 0.0000000 1.0000000) * table(predict(fit, iris[-sub,], type = \"class\"), iris[-sub, \"Species\"]) #>              #>              setosa versicolor virginica #>   setosa         25          0         0 #>   versicolor      0         24         2 #>   virginica       0          1        23"},{"path":"/reference/print.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an Rpart Object — print.rpart","title":"Print an Rpart Object — print.rpart","text":"function prints rpart object.  method generic  function print class \"rpart\".","code":""},{"path":"/reference/print.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an Rpart Object — print.rpart","text":"","code":"# S3 method for rpart print(x, minlength = 0, spaces = 2, cp, digits = getOption(\"digits\"),   nsmall = min(20, digits), ...)"},{"path":"/reference/print.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an Rpart Object — print.rpart","text":"x fitted model object class \"rpart\".  assumed result  function produces object named  components returned rpart function. minlength Controls abbreviation labels: see labels.rpart. spaces number spaces indent nodes increasing depth. digits number digits numbers print. nsmall number digits right decimal. See format. cp prune nodes complexity less cp   printout. Ignored unspecified. ... arguments passed methods.","code":""},{"path":"/reference/print.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Print an Rpart Object — print.rpart","text":"semi-graphical layout contents x$frame   printed.  Indentation used convey tree topology.   Information node includes node number, split, size,   deviance, fitted value.  \"class\" method,   class probabilities also printed.","code":""},{"path":"/reference/print.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an Rpart Object — print.rpart","text":"function method generic function print class    \"rpart\".  can invoked calling print object    appropriate class, directly calling print.rpart regardless    class object.","code":""},{"path":[]},{"path":[]},{"path":"/reference/printcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays CP table for Fitted Rpart Object — printcp","title":"Displays CP table for Fitted Rpart Object — printcp","text":"Displays cp table fitted rpart object.","code":""},{"path":"/reference/printcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays CP table for Fitted Rpart Object — printcp","text":"","code":"printcp(x, digits = getOption(\"digits\") - 2)"},{"path":"/reference/printcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays CP table for Fitted Rpart Object — printcp","text":"x fitted model object class \"rpart\".  assumed result  function produces object named  components returned rpart function. digits number digits numbers print.","code":""},{"path":"/reference/printcp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Displays CP table for Fitted Rpart Object — printcp","text":"Prints table optimal prunings based complexity parameter.","code":""},{"path":[]},{"path":[]},{"path":"/reference/prune.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost-complexity Pruning of an Rpart Object — prune.rpart","title":"Cost-complexity Pruning of an Rpart Object — prune.rpart","text":"Determines nested sequence subtrees supplied rpart object  recursively snipping least important splits, based  complexity parameter (cp).","code":""},{"path":"/reference/prune.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost-complexity Pruning of an Rpart Object — prune.rpart","text":"","code":"prune(tree, ...)  # S3 method for rpart prune(tree, cp, ...)"},{"path":"/reference/prune.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost-complexity Pruning of an Rpart Object — prune.rpart","text":"tree fitted model object class \"rpart\".  assumed result  function produces object named  components returned rpart function. cp Complexity parameter rpart object trimmed. ... arguments passed methods.","code":""},{"path":"/reference/prune.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost-complexity Pruning of an Rpart Object — prune.rpart","text":"new rpart object trimmed value cp.","code":""},{"path":[]},{"path":"/reference/prune.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost-complexity Pruning of an Rpart Object — prune.rpart","text":"","code":"z.auto <- rpart(Mileage ~ Weight, car.test.frame) zp <- prune(z.auto, cp = 0.1) plot(zp) #plot smaller rpart object"},{"path":"/reference/residuals.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals From a Fitted Rpart Object — residuals.rpart","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"Method residuals rpart object.","code":""},{"path":"/reference/residuals.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"","code":"# S3 method for rpart residuals(object, type = c(\"usual\", \"pearson\", \"deviance\"), ...)"},{"path":"/reference/residuals.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"object fitted model object class \"rpart\". type Indicates type residual desired. regression anova trees three residual   definitions reduce y - fitted.  residual returned   user method trees well. classification trees usual residuals   misclassification losses L(actual, predicted) L   loss matrix.  default losses residual   0/1 correct/incorrect classification.   pearson residual    (1-fitted)/sqrt(fitted(1-fitted)) deviance residual    sqrt(minus twice logarithm fitted). poisson exp   (survival) trees, usual residual   observed - expected number events.   pearson deviance residuals defined   McCullagh Nelder. ... arguments passed methods.","code":""},{"path":"/reference/residuals.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"Vector residuals type type fitted rpart object.","code":""},{"path":"/reference/residuals.rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"McCullagh P. Nelder, J. . (1989)   Generalized Linear Models.   London: Chapman Hall.","code":""},{"path":"/reference/residuals.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals From a Fitted Rpart Object — residuals.rpart","text":"","code":"fit <- rpart(skips ~ Opening + Solder + Mask + PadType + Panel,              data = solder.balance, method = \"anova\") summary(residuals(fit)) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -13.8000  -1.0361  -0.6833   0.0000   0.9639  16.2000  plot(predict(fit),residuals(fit))"},{"path":"/reference/rpart-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Functions — rpart-internal","title":"Internal Functions — rpart-internal","text":"Internal functions, used packages rpart ipred.","code":""},{"path":"/reference/rpart-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Functions — rpart-internal","text":"","code":"pred.rpart(fit, x) rpart.anova(y, offset, parms, wt) rpart.class(y, offset, parms, wt) rpart.matrix(frame) rpart.poisson(y, offset, parms, wt) rpartco(tree, parms)"},{"path":"/reference/rpart-internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Functions — rpart-internal","text":"fit tree fitted rpart. x matrix predictors. y responses. offset offset, NULL. parms list parameters, usually empty. wt case weights. frame model frame (call rpart) tree tree fitted rpart.","code":""},{"path":"/reference/rpart-internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Functions — rpart-internal","text":"rpartco x,y plotting coordinates nodes.  rpart.anova, rpart.class  rpart.poisson return list components y (adjusting offset necessary), parms input, numresp number responses, summary function invoked summary.rpart, text function invoked text.rpart.","code":""},{"path":"/reference/rpart.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for Rpart Fits — rpart.control","title":"Control for Rpart Fits — rpart.control","text":"Various parameters control aspects rpart fit.","code":""},{"path":"/reference/rpart.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for Rpart Fits — rpart.control","text":"","code":"rpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01,                maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,               surrogatestyle = 0, maxdepth = 30, ...)"},{"path":"/reference/rpart.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for Rpart Fits — rpart.control","text":"minsplit minimum number observations must exist node order      split attempted. minbucket minimum number observations terminal <leaf> node.     one minbucket minsplit specified,     code either sets minsplit minbucket*3     minbucket minsplit/3, appropriate. cp complexity parameter.  split decrease overall     lack fit factor cp attempted.  instance,     anova splitting, means overall R-squared must     increase cp step. main role parameter     save computing time pruning splits obviously     worthwhile. Essentially,user informs program     split improve fit cp likely     pruned cross-validation, hence program need     pursue . maxcompete number competitor splits retained output.  useful     know just split chosen, variable came second,     third, etc. maxsurrogate number surrogate splits retained output.  set     zero compute time reduced, since approximately half     computational time (setup) used search surrogate     splits. usesurrogate use surrogates splitting process.  0 means     display ; observation missing value primary     split rule sent tree.  1 means use     surrogates, order, split subjects missing primary variable;     surrogates missing observation split.  value     2 ,surrogates missing, send observation     majority direction.  value 0 corresponds action     tree, 2 recommendations Breiman     et.al (1984). xval number cross-validations. surrogatestyle controls selection best surrogate.     set 0 (default) program uses total number correct     classification potential surrogate variable,     set 1 uses percent correct, calculated     non-missing values surrogate.     first option severely penalizes covariates large number     missing values. maxdepth Set maximum depth node final tree, root     node counted depth 0.  Values greater  30 rpart     give nonsense results 32-bit machines. ... mop arguments.","code":""},{"path":"/reference/rpart.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for Rpart Fits — rpart.control","text":"list containing options.","code":""},{"path":[]},{"path":"/reference/rpart.exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization function for exponential fitting — rpart.exp","title":"Initialization function for exponential fitting — rpart.exp","text":"function initialization step rpart,   response survival object.  rescales data   exponential baseline hazard uses Poisson methods.    function rarely ever called directly user.","code":""},{"path":"/reference/rpart.exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization function for exponential fitting — rpart.exp","text":"","code":"rpart.exp(y, offset, parms, wt)"},{"path":"/reference/rpart.exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization function for exponential fitting — rpart.exp","text":"y response, class Surv offset optional offset parms parameters controlling fit.     list components shrink method.     first prior coefficient variation     predictions.  second either \"deviance\"     \"sqrt\" measure used cross-validation.     values missing defaults used,     \"deviance\" method, shrinkage 1.0     deviance method 0 square root. wt case weights, present","code":""},{"path":"/reference/rpart.exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization function for exponential fitting — rpart.exp","text":"list necessary initialization components","code":""},{"path":"/reference/rpart.exp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initialization function for exponential fitting — rpart.exp","text":"Terry Therneau","code":""},{"path":[]},{"path":"/reference/rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive Partitioning and Regression Trees — rpart","title":"Recursive Partitioning and Regression Trees — rpart","text":"Fit rpart model","code":""},{"path":"/reference/rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursive Partitioning and Regression Trees — rpart","text":"","code":"rpart(formula, data, weights, subset, na.action = na.rpart, method,       model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)"},{"path":"/reference/rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursive Partitioning and Regression Trees — rpart","text":"formula formula, response interaction     terms.  data frame, taken model frame     (see model.frame). data optional data frame interpret variables     named formula. weights optional case weights. subset optional expression saying subset     rows data used fit. na.action default action deletes observations     y missing, keeps one predictors     missing. method one \"anova\", \"poisson\", \"class\"     \"exp\".  method missing routine tries     make intelligent guess.     y survival object, method = \"exp\" assumed,     y 2 columns method = \"poisson\" assumed,     y factor method = \"class\" assumed,     otherwise method = \"anova\" assumed.     wisest specify method directly, especially     criteria may added function future. Alternatively, method can list functions named     init, split eval.  Examples given     file tests/usersplits.R sources,     vignettes ‘User Written Split Functions’. model logical: keep copy model frame result?     input value model model frame (likely     earlier call rpart function), frame used     rather constructing new data. x keep copy x matrix result. y keep copy dependent variable result.      missing model supplied defaults FALSE. parms optional parameters splitting function.     Anova splitting parameters.     Poisson splitting single parameter, coefficient variation     prior distribution rates.  default value 1.     Exponential splitting parameter Poisson.     classification splitting, list can contain :     vector prior probabilities (component prior), loss matrix     (component loss) splitting index (component     split).  priors must positive sum 1.  loss     matrix must zeros diagonal positive -diagonal     elements.  splitting index can gini     information.  default priors proportional data     counts, losses default 1, split defaults     gini. control list options control details     rpart algorithm.  See rpart.control. cost vector non-negative costs, one variable     model. Defaults one variables.  scalings     applied considering splits, improvement splitting     variable divided cost deciding split     choose. ... arguments rpart.control may also     specified call rpart.  checked     list valid arguments.","code":""},{"path":"/reference/rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recursive Partitioning and Regression Trees — rpart","text":"differs tree function S mainly handling   surrogate variables.  details follows Breiman   et. al (1984) quite closely.  R package tree provides   re-implementation tree.","code":""},{"path":"/reference/rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursive Partitioning and Regression Trees — rpart","text":"object class rpart.  See rpart.object.","code":""},{"path":"/reference/rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Recursive Partitioning and Regression Trees — rpart","text":"Breiman L., Friedman J. H., Olshen R. ., Stone, C. J. (1984)   Classification Regression Trees.   Wadsworth.","code":""},{"path":[]},{"path":"/reference/rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursive Partitioning and Regression Trees — rpart","text":"","code":"fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis) fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,               parms = list(prior = c(.65,.35), split = \"information\")) fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,               control = rpart.control(cp = 0.05)) par(mfrow = c(1,2), xpd = NA) # otherwise on some devices the text is clipped plot(fit) text(fit, use.n = TRUE) plot(fit2) text(fit2, use.n = TRUE)"},{"path":"/reference/rpart.object.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive Partitioning and Regression Trees Object — rpart.object","title":"Recursive Partitioning and Regression Trees Object — rpart.object","text":"objects representing fitted rpart trees.","code":""},{"path":"/reference/rpart.object.html","id":"structure","dir":"Reference","previous_headings":"","what":"Structure","title":"Recursive Partitioning and Regression Trees Object — rpart.object","text":"following components must included legitimate rpart   object.","code":""},{"path":"/reference/rpart.object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursive Partitioning and Regression Trees Object — rpart.object","text":"frame data frame one row node tree.   row.names frame contain (unique) node numbers   follow binary ordering indexed node depth.   Columns frame include   var, factor giving names variables used   split node (leaf nodes denoted level \"<leaf>\"),    n, number observations reaching node,   wt, sum case weights observations reaching node,   dev, deviance node,   yval, fitted value response node,   splits, two column matrix left right split labels   node.  Also included frame complexity,   complexity parameter split collapse, ncompete,   number competitor splits recorded, nsurrogate,   number surrogate splits recorded. Extra response information may present yval2,   contains number events node (poisson tree),   matrix containing fitted class, class counts node,   class probabilities ‘node probability’ (classification trees). integer vector length number observations   root node, containing row number frame corresponding   leaf node observation falls . call image call produced object, arguments    named actual formula included formula argument.    re-evaluate call, say update(tree). terms object class c(\"terms\", \"formula\") (see   terms.object) summarizing formula.  Used various   methods, typically direct relevance users. splits numeric matrix describing splits: present .   row label name   split variable, columns count, number   observations (missing positive weight) sent   left right split (competitor splits number   sent left right split used,   surrogate splits number missing primary split variable   decided using surrogate), ncat, number   categories levels variable (+/-1 continuous   variable), improve, improvement deviance given   split, , surrogates, concordance surrogate   primary, index, numeric split point.  last   column adj gives adjusted concordance surrogate splits.   factor, index column contains row number   csplit matrix.  continuous variable, sign ncat   determines whether subset x < cutpoint x >   cutpoint sent left. csplit integer matrix.  (present least one split   variables factor ordered factor.)  row   split, number columns largest number   levels factors.  row given index column   splits matrix.  columns record 1   level factor goes left, 3 goes   right, 2 level present node   tree (defined factor). method character string: method used grow tree.   One   \"class\", \"exp\", \"poisson\", \"anova\"   \"user\" (splitting functions supplied). cptable matrix information optimal prunings based   complexity parameter. variable.importance named numeric vector giving importance variable.  (  present splits.)  printed   summary.rpart rescaled add 100. numresp integer number responses; number levels factor response. parms, control record arguments supplied, defaults filled . functions summary, print text functions method used. ordered named logical vector recording variable   ordered factor. na.action (relevant) information returned model.frame   special handling NAs derived na.action   argument. may attributes  \"xlevels\" \"levels\" recording levels factor splitting variables factor response respectively. Optional components include model frame (model), matrix predictors (x) response variable (y) used construct rpart object.","code":""},{"path":[]},{"path":"/reference/rsq.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"Produces 2 plots.  first plots r-square (apparent   apparent - cross-validation) versus number splits.     second plots Relative Error(cross-validation) +/- 1-SE   cross-validation versus number splits.","code":""},{"path":"/reference/rsq.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"","code":"rsq.rpart(x)"},{"path":"/reference/rsq.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"x fitted model object class \"rpart\".  assumed result   function produces object named   components returned rpart function.","code":""},{"path":"/reference/rsq.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"Two plots produced.","code":""},{"path":"/reference/rsq.rpart.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"labels appropriate \"anova\" method.","code":""},{"path":"/reference/rsq.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the Approximate R-Square for the Different Splits — rsq.rpart","text":"","code":"z.auto <- rpart(Mileage ~ Weight, car.test.frame) rsq.rpart(z.auto) #>  #> Regression tree: #> rpart(formula = Mileage ~ Weight, data = car.test.frame) #>  #> Variables actually used in tree construction: #> [1] Weight #>  #> Root node error: 1354.6/60 = 22.576 #>  #> n= 60  #>  #>         CP nsplit rel error  xerror     xstd #> 1 0.595349      0   1.00000 1.01421 0.175508 #> 2 0.134528      1   0.40465 0.54660 0.102885 #> 3 0.012828      2   0.27012 0.41851 0.078389 #> 4 0.010000      3   0.25729 0.42323 0.069678"},{"path":"/reference/snip.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Snip Subtrees of an Rpart Object — snip.rpart","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"Creates \"snipped\" rpart object, containing nodes remain   selected subtrees snipped .  user can snip   nodes using toss argument, interactively clicking mouse   button specified nodes within graphics window.","code":""},{"path":"/reference/snip.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"","code":"snip.rpart(x, toss)"},{"path":"/reference/snip.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"x fitted model object class \"rpart\".  assumed result   function produces object named   components returned rpart function. toss integer vector containing indices (node numbers) subtrees   snipped .  missing, user selects branches snip   described .","code":""},{"path":"/reference/snip.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"rpart object containing nodes remain specified   selected subtrees snipped .","code":""},{"path":"/reference/snip.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"dendrogram rpart expected visible graphics   device, graphics input device (e.g., mouse) required.  Clicking   (selection button) node displays node number, sample   size, response y-value, Error (dev). Clicking second time   node snips subtree visually erases subtree.   process may repeated number times.  Warnings result   selecting root leaf nodes.  Clicking exit button stop   snipping process return resulting rpart object. See documentation specific graphics device details   graphical input techniques.","code":""},{"path":"/reference/snip.rpart.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"Visually erasing plot done -plotting background   colour.  nothing background transparent   (often true screen devices).","code":""},{"path":[]},{"path":"/reference/snip.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Snip Subtrees of an Rpart Object — snip.rpart","text":"","code":"## dataset not in R if (FALSE) { z.survey <- rpart(market.survey) # grow the rpart object plot(z.survey) # plot the tree z.survey2 <- snip.rpart(z.survey, toss = 2) # trim subtree at node 2 plot(z.survey2) # plot new tree  # can also interactively select the node using the mouse in the # graphics window }"},{"path":"/reference/solder.balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Soldering of Components on Printed-Circuit Boards — solder.balance","title":"Soldering of Components on Printed-Circuit Boards — solder.balance","text":"solder.balance data frame 720 rows 6 columns, representing   balanced subset designed experiment varying 5 factors   soldering components printed-circuit boards. solder data frame full version data 900   rows.  located rpart survival packages.","code":""},{"path":"/reference/solder.balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soldering of Components on Printed-Circuit Boards — solder.balance","text":"","code":"solder"},{"path":"/reference/solder.balance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soldering of Components on Printed-Circuit Boards — solder.balance","text":"data frame contains following columns: Opening factor levels L, M S indicating amount clearance around mounting pad. Solder factor levels Thick Thin giving thickness solder used. Mask factor levels A1.5, A3, B3 B6 indicating type thickness mask used. PadType factor levels D4, D6, D7, L4, L6, L7, L8, L9, W4 W9 giving size geometry mounting pad. Panel 1:3 indicating panel board tested. skips numeric vector giving number visible solder skips.","code":""},{"path":"/reference/solder.balance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soldering of Components on Printed-Circuit Boards — solder.balance","text":"John M. Chambers Trevor J. Hastie eds. (1992)   Statistical Models S, Wadsworth Brooks/Cole,   Pacific Grove, CA.","code":""},{"path":"/reference/solder.balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soldering of Components on Printed-Circuit Boards — solder.balance","text":"","code":"fit <- rpart(skips ~ Opening + Solder + Mask + PadType + Panel,              data = solder.balance, method = \"anova\") summary(residuals(fit)) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -13.8000  -1.0361  -0.6833   0.0000   0.9639  16.2000  plot(predict(fit), residuals(fit))"},{"path":"/reference/stagec.html","id":null,"dir":"Reference","previous_headings":"","what":"Stage C Prostate Cancer — stagec","title":"Stage C Prostate Cancer — stagec","text":"set 146 patients stage C prostate cancer,   study exploring prognostic value flow cytometry.","code":""},{"path":"/reference/stagec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stage C Prostate Cancer — stagec","text":"","code":"data(stagec)"},{"path":"/reference/stagec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stage C Prostate Cancer — stagec","text":"data frame 146 observations following 8 variables. pgtime Time progression last follow-(years) pgstat 1 = progression observed, 0 = censored age age years eet early endocrine therapy, 1 = , 2 = yes g2 percent cells G2 phase, found flow cytometry grade grade tumor, Farrow system gleason grade tumor, Gleason system ploidy ploidy status tumor, flow       cytometry. Values diploid, tetraploid,       aneuploid","code":""},{"path":"/reference/stagec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stage C Prostate Cancer — stagec","text":"tumor called diploid (normal complement dividing cells) fraction cells G2 phase determined 13% less. Aneuploid cells measurable fraction chromosome count neither 24 48, G2 percent difficult impossible measure.","code":""},{"path":"/reference/stagec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stage C Prostate Cancer — stagec","text":"","code":"require(survival) #> Loading required package: survival rpart(Surv(pgtime, pgstat) ~ ., stagec) #> n= 146  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #>  1) root 146 192.111100 1.0000000   #>    2) grade< 2.5 61  44.799010 0.3634439   #>      4) g2< 11.36 33   9.117405 0.1229835 * #>      5) g2>=11.36 28  27.602190 0.7345610   #>       10) gleason< 5.5 20  14.297110 0.5304115 * #>       11) gleason>=5.5 8  11.094650 1.3069940 * #>    3) grade>=2.5 85 122.441500 1.6148600   #>      6) age>=56.5 75 103.062900 1.4255040   #>       12) gleason< 7.5 50  66.119800 1.1407320   #>         24) g2< 13.475 24  27.197170 0.8007306 * #>         25) g2>=13.475 26  36.790960 1.4570210   #>           50) g2>=17.915 15  20.332740 0.9789825 * #>           51) g2< 17.915 11  13.459010 2.1714480 * #>       13) gleason>=7.5 25  33.487250 2.0307290   #>         26) g2>=15.29 10  11.588480 1.2156230 * #>         27) g2< 15.29 15  18.939150 2.7053610 * #>      7) age< 56.5 10  13.769010 3.1822320 *"},{"path":"/reference/summary.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a Fitted Rpart Object — summary.rpart","title":"Summarize a Fitted Rpart Object — summary.rpart","text":"Returns detailed listing fitted rpart object.","code":""},{"path":"/reference/summary.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a Fitted Rpart Object — summary.rpart","text":"","code":"# S3 method for rpart summary(object, cp = 0, digits = getOption(\"digits\"), file, ...)"},{"path":"/reference/summary.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a Fitted Rpart Object — summary.rpart","text":"object fitted model object class \"rpart\".  assumed result   function produces object named   components returned rpart function. digits Number significant digits used result. cp trim nodes complexity less cp listing. file write output given file name. (Full listings tree   often quite long). ... arguments passed methods.","code":""},{"path":"/reference/summary.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a Fitted Rpart Object — summary.rpart","text":"function method generic function summary class   \"rpart\".  can invoked calling summary   object appropriate class, directly calling   summary.rpart regardless class object. prints call, table shown printcp,   variable importance (summing 100) details node (  details depending type tree).","code":""},{"path":[]},{"path":"/reference/summary.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a Fitted Rpart Object — summary.rpart","text":"","code":"## a regression tree z.auto <- rpart(Mileage ~ Weight, car.test.frame) summary(z.auto) #> Call: #> rpart(formula = Mileage ~ Weight, data = car.test.frame) #>   n= 60  #>  #>           CP nsplit rel error    xerror       xstd #> 1 0.59534912      0 1.0000000 1.0392077 0.17925876 #> 2 0.13452819      1 0.4046509 0.4953358 0.07473638 #> 3 0.01282843      2 0.2701227 0.3795883 0.06599992 #> 4 0.01000000      3 0.2572943 0.3839280 0.06564961 #>  #> Variable importance #> Weight  #>    100  #>  #> Node number 1: 60 observations,    complexity param=0.5953491 #>   mean=24.58333, MSE=22.57639  #>   left son=2 (45 obs) right son=3 (15 obs) #>   Primary splits: #>       Weight < 2567.5 to the right, improve=0.5953491, (0 missing) #>  #> Node number 2: 45 observations,    complexity param=0.1345282 #>   mean=22.46667, MSE=8.026667  #>   left son=4 (22 obs) right son=5 (23 obs) #>   Primary splits: #>       Weight < 3087.5 to the right, improve=0.5045118, (0 missing) #>  #> Node number 3: 15 observations #>   mean=30.93333, MSE=12.46222  #>  #> Node number 4: 22 observations #>   mean=20.40909, MSE=2.78719  #>  #> Node number 5: 23 observations,    complexity param=0.01282843 #>   mean=24.43478, MSE=5.115312  #>   left son=10 (15 obs) right son=11 (8 obs) #>   Primary splits: #>       Weight < 2747.5 to the right, improve=0.1476996, (0 missing) #>  #> Node number 10: 15 observations #>   mean=23.8, MSE=4.026667  #>  #> Node number 11: 8 observations #>   mean=25.625, MSE=4.984375  #>   ## a classification tree with multiple variables and surrogate splits. summary(rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)) #> Call: #> rpart(formula = Kyphosis ~ Age + Number + Start, data = kyphosis) #>   n= 81  #>  #>           CP nsplit rel error    xerror      xstd #> 1 0.17647059      0 1.0000000 1.0000000 0.2155872 #> 2 0.01960784      1 0.8235294 0.8823529 0.2056488 #> 3 0.01000000      4 0.7647059 0.8823529 0.2056488 #>  #> Variable importance #>  Start    Age Number  #>     64     24     12  #>  #> Node number 1: 81 observations,    complexity param=0.1764706 #>   predicted class=absent   expected loss=0.2098765  P(node) =1 #>     class counts:    64    17 #>    probabilities: 0.790 0.210  #>   left son=2 (62 obs) right son=3 (19 obs) #>   Primary splits: #>       Start  < 8.5  to the right, improve=6.762330, (0 missing) #>       Number < 5.5  to the left,  improve=2.866795, (0 missing) #>       Age    < 39.5 to the left,  improve=2.250212, (0 missing) #>   Surrogate splits: #>       Number < 6.5  to the left,  agree=0.802, adj=0.158, (0 split) #>  #> Node number 2: 62 observations,    complexity param=0.01960784 #>   predicted class=absent   expected loss=0.09677419  P(node) =0.7654321 #>     class counts:    56     6 #>    probabilities: 0.903 0.097  #>   left son=4 (29 obs) right son=5 (33 obs) #>   Primary splits: #>       Start  < 14.5 to the right, improve=1.0205280, (0 missing) #>       Age    < 55   to the left,  improve=0.6848635, (0 missing) #>       Number < 4.5  to the left,  improve=0.2975332, (0 missing) #>   Surrogate splits: #>       Number < 3.5  to the left,  agree=0.645, adj=0.241, (0 split) #>       Age    < 16   to the left,  agree=0.597, adj=0.138, (0 split) #>  #> Node number 3: 19 observations #>   predicted class=present  expected loss=0.4210526  P(node) =0.2345679 #>     class counts:     8    11 #>    probabilities: 0.421 0.579  #>  #> Node number 4: 29 observations #>   predicted class=absent   expected loss=0  P(node) =0.3580247 #>     class counts:    29     0 #>    probabilities: 1.000 0.000  #>  #> Node number 5: 33 observations,    complexity param=0.01960784 #>   predicted class=absent   expected loss=0.1818182  P(node) =0.4074074 #>     class counts:    27     6 #>    probabilities: 0.818 0.182  #>   left son=10 (12 obs) right son=11 (21 obs) #>   Primary splits: #>       Age    < 55   to the left,  improve=1.2467530, (0 missing) #>       Start  < 12.5 to the right, improve=0.2887701, (0 missing) #>       Number < 3.5  to the right, improve=0.1753247, (0 missing) #>   Surrogate splits: #>       Start  < 9.5  to the left,  agree=0.758, adj=0.333, (0 split) #>       Number < 5.5  to the right, agree=0.697, adj=0.167, (0 split) #>  #> Node number 10: 12 observations #>   predicted class=absent   expected loss=0  P(node) =0.1481481 #>     class counts:    12     0 #>    probabilities: 1.000 0.000  #>  #> Node number 11: 21 observations,    complexity param=0.01960784 #>   predicted class=absent   expected loss=0.2857143  P(node) =0.2592593 #>     class counts:    15     6 #>    probabilities: 0.714 0.286  #>   left son=22 (14 obs) right son=23 (7 obs) #>   Primary splits: #>       Age    < 111  to the right, improve=1.71428600, (0 missing) #>       Start  < 12.5 to the right, improve=0.79365080, (0 missing) #>       Number < 3.5  to the right, improve=0.07142857, (0 missing) #>  #> Node number 22: 14 observations #>   predicted class=absent   expected loss=0.1428571  P(node) =0.1728395 #>     class counts:    12     2 #>    probabilities: 0.857 0.143  #>  #> Node number 23: 7 observations #>   predicted class=present  expected loss=0.4285714  P(node) =0.08641975 #>     class counts:     3     4 #>    probabilities: 0.429 0.571  #>"},{"path":"/reference/text.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Place Text on a Dendrogram Plot — text.rpart","title":"Place Text on a Dendrogram Plot — text.rpart","text":"Labels current plot tree dendrogram text.","code":""},{"path":"/reference/text.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place Text on a Dendrogram Plot — text.rpart","text":"","code":"# S3 method for rpart text(x, splits = TRUE, label, FUN = text, all = FALSE,      pretty = NULL, digits = getOption(\"digits\") - 3, use.n = FALSE,      fancy = FALSE, fwidth = 0.8, fheight = 0.8, bg = par(\"bg\"),      minlength = 1L, ...)"},{"path":"/reference/text.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place Text on a Dendrogram Plot — text.rpart","text":"x fitted model object class \"rpart\".  assumed result   function produces object named   components returned rpart function. splits logical flag.  TRUE (default), splits tree   labeled criterion split. label compatibility rpart2, ignored version (  warning). FUN name labeling function, e.g. text. Logical.  TRUE, nodes labeled, otherwise just   terminal nodes. minlength length use factor labels.  value 1 causes   printed ‘’, ‘b’, .....   Larger values use abbreviations label names.   See labels.rpart function details. pretty alternative minlength argument, see   labels.rpart. digits number significant digits include numerical labels. use.n Logical.  TRUE, adds label    (#events level1/ #events level2/ etc. class,   n anova, #events/n poisson   exp). fancy Logical.  TRUE, nodes represented ellipses (interior nodes)   rectangles (leaves) labeled yval.  edges connecting   nodes labeled left right splits. fwidth Relates option fancy width ellipses rectangles.   fwidth < 1 scaling factor (default = 0.8).     fwidth > 1 represents number character widths    (current graphical device) use. fheight Relates option fancy height ellipses rectangles.   fheight <1 scaling factor (default = 0.8).    fheight > 1 represents number character heights    (current graphical device) use. bg color used paint background annotations fancy = TRUE. ... Graphical parameters may also supplied arguments   function (see par).  labels often extend outside plot   region can helpful specify xpd = TRUE.","code":""},{"path":"/reference/text.rpart.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side Effects","title":"Place Text on a Dendrogram Plot — text.rpart","text":"current plot tree dendrogram labeled.","code":""},{"path":[]},{"path":"/reference/text.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Place Text on a Dendrogram Plot — text.rpart","text":"","code":"freen.tr <- rpart(y ~ ., freeny) par(xpd = TRUE) plot(freen.tr) text(freen.tr, use.n = TRUE, all = TRUE)"},{"path":"/reference/xpred.rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Cross-Validated Predictions — xpred.rpart","title":"Return Cross-Validated Predictions — xpred.rpart","text":"Gives predicted values rpart fit,   cross validation, set complexity parameter values.","code":""},{"path":"/reference/xpred.rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Cross-Validated Predictions — xpred.rpart","text":"","code":"xpred.rpart(fit, xval = 10, cp, return.all = FALSE)"},{"path":"/reference/xpred.rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Cross-Validated Predictions — xpred.rpart","text":"fit object class \"rpart\". xval number cross-validation groups.  may also explicit list   integers define cross-validation groups. cp desired list complexity values.  default taken   cptable component fit. return.FALSE return first element prediction","code":""},{"path":"/reference/xpred.rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Cross-Validated Predictions — xpred.rpart","text":"matrix one row observation one column complexity   value.  return.TRUE prediction node   vector, result array containing   predictions.  response categorical, instance,   result contains predicted class followed class   probabilities selected terminal node;  result[1,,] matrix predicted classes,  result[2,,] matrix class 1 probabilities, etc.","code":""},{"path":"/reference/xpred.rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return Cross-Validated Predictions — xpred.rpart","text":"Complexity penalties actually ranges, values.    cp values found table \\(.36\\), \\(.28\\),   \\(.13\\), instance, means first row   table holds complexity penalties range \\([.36, 1]\\),   second row cp range \\([.28, .36)\\)   third row \\([.13,.28)\\).  default, geometric mean   interval used cross validation.","code":""},{"path":[]},{"path":"/reference/xpred.rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Cross-Validated Predictions — xpred.rpart","text":"","code":"fit <- rpart(Mileage ~ Weight, car.test.frame) xmat <- xpred.rpart(fit) xerr <- (xmat - car.test.frame$Mileage)^2 apply(xerr, 2, sum)   # cross-validated error estimate #> 0.79767456 0.28300396 0.04154257 0.01132626  #>  1393.8539   806.7188   574.4650   551.6764   # approx same result as rel. error from printcp(fit) apply(xerr, 2, sum)/var(car.test.frame$Mileage)  #> 0.79767456 0.28300396 0.04154257 0.01132626  #>   60.71046   35.13730   25.02130   24.02873  printcp(fit) #>  #> Regression tree: #> rpart(formula = Mileage ~ Weight, data = car.test.frame) #>  #> Variables actually used in tree construction: #> [1] Weight #>  #> Root node error: 1354.6/60 = 22.576 #>  #> n= 60  #>  #>         CP nsplit rel error  xerror     xstd #> 1 0.595349      0   1.00000 1.02097 0.174873 #> 2 0.134528      1   0.40465 0.63193 0.110721 #> 3 0.012828      2   0.27012 0.47149 0.084570 #> 4 0.010000      3   0.25729 0.47343 0.084295"}]
